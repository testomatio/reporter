<!DOCTYPE html>
<html lang='en'>
<head>
    <meta charset='UTF-8' />
    <meta
      name='viewport'
      content='width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0'
    />
    <meta http-equiv='X-UA-Compatible' content='ie=edge' />
    <link
      href='https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css'
      rel='stylesheet'
      integrity='sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC'
      crossorigin='anonymous'
    />
    <link
      rel='stylesheet'
      href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.3.0/css/all.min.css'
      integrity='sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk/bSuGGKHEyjSoQ1zVisanQ=='
      crossorigin='anonymous'
      referrerpolicy='no-referrer'
    />
    {{#if runId}}
      <title>Report #{{runId}} - Testomat.io</title>
    {{else}}
      <title>Report Testomat.io</title>
    {{/if}}
    <style>
        body {
            padding: 0;
            margin: 0;
        }

        header,
        div,
        p,
        form,
        input,
        a,
        span,
        button {
            box-sizing: border-box;
        }
        img {
            width: 100%;
            display: block;
            max-width: 100%;
            height: auto;
        }
        p, span {
            font-weight: 400;
            font-size: 14px;
            color: grey;
            margin: 0;
        }
        .report {
            padding-top: 15px;
        }
        .level_1 {
            margin-bottom: 20px;
            border-bottom: 1px solid grey;
            padding-bottom: 10px;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        .header__point {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            margin-right: 15px;
        }
        .header__point_red {
            background: red;
        }
        .header__block {
            display: flex;
            align-items: center;
        }
        .header__case {
            display: flex;
            align-items: center;
            margin-right: 15px;
        }
        .header__case p {
            margin-right: 7px;
        }
        .header__case span {
            color: black;
        }
        .header__block button {
            margin-left: 15px;
        }
        .header__type {
            background: #0d6efd;
            color: #FFF;
            border-radius: 10px;
            padding: 1px 5px;
            margin-right: 15px;
        }
        .header__case i {
            color: grey;
            margin-right: 5px;
        }
        .title {
            display: flex;
            margin-bottom: 20px;
        }
        .title p {
            color: black;
            font-size: 20px;
            margin-right: 5px;
        }
        .statright {
            display: flex;
        }
        .statdesc {
            display: flex;
            flex-direction: column;
        }
        .statdesc__row {
            padding: 15px 10px;
            display: flex;
        }
        .statdesc__row_first {
            width: 150px;
        }
        .statdesc__row:nth-child(odd) {
            background: #F4F5FF;
        }
        .statdesc__row p {
            font-weight: bold;
        }
        .statdesc {
            width: 100%;
        }
        .statstatus {
            display: flex;
            align-items: center;
        }
        .statstatus p {
            font-weight: bold;
        }
        .statstatus div {
            font-weight: bold;
        }
        .statstatus_failed div {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
        }
        .statstatus_failed p {
            color: red;
            text-transform: uppercase;
        }
        .statstatus_failed div {
            background: red;
        }
        .statstatus_passed div {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
            text-transform: uppercase;
        }
        .statstatus_passed div {
            background: green;
        }
        .statstatus_passed p {
            color: green;
            text-transform: uppercase;
        }
        .statstatus_skipped div{
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 5px;
            text-transform: uppercase;
        }
        .statstatus_skipped div {
            background: yellow;
        }
        .statstatus_skipped p {
            color: yellow;
            text-transform: uppercase;
        }
        .fa-magnifying-glass {
            font-size: 24px;
            color: gray;
        }
        .level_5 {
            margin-top: 20px;
        }
        .numTest {
            font-weight: 700;
            font-size: 16px;
            color:#0d6efd;
        }
        .testitem {
            border: 1px solid grey;
            border-radius: 10px;
            margin-bottom: 15px;
        }
        .testitem__top {
            width: 100%;
            display: flex;
            background: #e9ecef;
            padding: 3px 0;
            border-radius:10px;
            cursor: pointer;
        }
        .testitem__icon {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 30px;
            margin-right: 15px;
        }
        .testitem__ico {
            font-size: 18px;
        }
        .testitem__name {
            font-weight: 700;
            color: black;
            font-size: 16px;
        }
        .testitem__body {
            display: flex;
            border-top: 1px solid grey;
        }
        .testitem__menu {
            display: flex;
            flex-direction: column;
            border-right: 1px solid grey;
            padding: 15px;
        }
        .testitem__mitem {
            margin-bottom: 10px;
            font-size: 14px;
            cursor: pointer;
            color: grey;
        }
        .testitem__mitem_active {
            color: green;
        }
        .testitem__case {
            display: flex;
            flex-direction: column;
            padding: 10px;
        }
        .testitem__title {
            font-size: 18px;
            color: black;
            font-weight: 700;
            margin-bottom: 15px;
            text-decoration: underline;
        }
        .testitem__block p {
            font-size: 14px;
            white-space: pre-line;
        }
        .test__empty__list {
            margin-bottom: 10px;
            color: grey;
        }
        .testitem__content {
            width: 92%;
        }
        /* Passed TAB*/
        #passedTest:not(:checked) + .btn-outline-dark {
            background-color: #39BD2F;
        }
        #passedTest:checked + .btn-outline-dark {
            background-color: #68cf61;
            color: white;
        }
        /* Failed TAB*/
        #failedTest:not(:checked) + .btn-outline-dark {
            background-color: #F2230C;
        }
        #failedTest:checked + .btn-outline-dark {
            background-color: #FA6E5E;
            color: white;
        }
        /* Skipped TAB*/
        #skippedTest:not(:checked) + .btn-outline-dark {
            background-color: #F2C00C;
        }
        #skippedTest:checked + .btn-outline-dark {
            background-color: #dfc155;
        }
        /* Pagination component styles*/
        .page-link {
            color: black;
            background: #f5f5f8;
        }
        .page-link:hover {
            color: black;
        }
        .form-select:focus {
            border-color: #adadad;
            box-shadow: 0 0 0 0.25rem rgb(67 71 78 / 25%);
        }
        .page-item.active .page-link {
            background: #d1d1d2;
            border-color: #adadad;
        }
        .noData {
            background: #e9ecef;
            text-align: center;
            height: 100px;
            padding-top: 39px;
            border-radius: 5px;
        }
    </style>
</head>

<body class='bg-gray-50 pt-6 px-4 lg:pt-4 lg:px-40 h-full;'>
    <section class='report' id='report'>
        <div class='container'>
            <!-- top -->
            <div class='row level_1'>
            <div class='col-12'>
                <div class='header'>
                <div class='header__block'>
                    {{#if runId}}
                    <div class='header__case'>
                        <p>Run</p>
                        <span><strong>#</strong>{{runId}}</span>
                    </div>
                    {{/if}}
                    <p class='header__type'>
                    <i class='fa-solid fa-face-smile'></i>
                    automated job
                    </p>
                </div>
                <div class='header__block'>
                    {{#if runUrl}}
                    <a href='{{runUrl}}' target='_blank' class='btn btn-primary'>
                        Full Report
                    </a>
                    {{else}}
                    <button class='btn btn-primary' disabled>
                        Full Report
                    </button>
                    {{/if}}
                </div>
                </div>
            </div>
            </div>
            <!-- top -->

            <div class='row level_2'>
            <div class='col-12'>
                <div class='title'>
                <p>Testomatio Run Information</p>
                </div>
            </div>
            </div>

            <!-- Schedule and information -->
            <div class='row level_3'>
                <div class='col-6'>
                    <div class='statleft'>
                    <div id='graff'></div>
                    </div>
                </div>
            <div class='col-6'>
                <div class='statright'>
                <div class='statdesc'>
                    <!-- 1 -->
                    <div class='statdesc__row'>
                    <div class='statdesc__row_first'>
                        <p>Status</p>
                    </div>
                    <div class='statstatus statstatus_{{status}}'>
                        <div></div>
                        <p>{{status}}</p>
                    </div>
                    </div>
                    <!-- 1 -->
                    <!-- 1 -->
                    <div class='statdesc__row'>
                    <div class='statdesc__row_first'>
                        <p>Execution Duration</p>
                    </div>
                    <span>{{executionTime}}</span>
                    </div>
                    <!-- 1 -->
                    <!-- 1 -->
                    <div class='statdesc__row'>
                    <div class='statdesc__row_first'>
                        <p>Tests</p>
                    </div>
                    <span>{{tests.length}}</span>
                    </div>
                    <!-- 1 -->
                    <!-- 1 -->
                    <div class='statdesc__row'>
                    <div class='statdesc__row_first'>
                        <p>Start Execution Date</p>
                    </div>
                    <span>{{executionDate}}</span>
                    </div>
                    <!-- 1 -->
                </div>
                </div>
            </div>
            </div>
            <!-- Schedule and information -->
            <div class='row level_4'>
                <div class='col-6'>
                    <div class='input-group'>
                    <div class='input-group-prepend'>
                        <span class='input-group-text' id='basic-addon1'>
                        <i class='fa-solid fa-magnifying-glass'></i>
                        </span>
                    </div>
                    <input
                        type='text'
                        class='form-control inputSearch'
                        placeholder='Search'
                        aria-label='Search'
                        aria-describedby='basic-addon1'
                    />
                    </div>
                </div>

                <div class='col-6 d-flex justify-content-end'>
                    <div class='btn-group menuTests' role='group' aria-label='Basic radio toggle button group'>

                        <input
                            type='radio'
                            class='btn-check'
                            name='groupTest'
                            id='allTest'
                            autocomplete='off'
                            category='all'
                            checked
                        />
                        <label class='btn btn-outline-dark' for='allTest'>All
                            <span class='numTest' name='numTest' lcategory='all'>0</span>
                        </label>

                        <input
                            type='radio'
                            class='btn-check'
                            name='groupTest'
                            id='passedTest'
                            autocomplete='off'
                            category='passed'
                        />
                        <label class='btn btn-outline-dark' for='passedTest'>Passed
                            <span class='numTest' name='numTest' lcategory='passed'>0</span>
                        </label>

                        <input
                            type='radio'
                            class='btn-check'
                            name='groupTest'
                            id='failedTest'
                            autocomplete='off'
                            category='failed'
                        />
                        <label class='btn btn-outline-dark' for='failedTest'>Failed
                            <span class='numTest' name='numTest' lcategory='failed'>0</span>
                        </label>

                        <input
                            type='radio'
                            class='btn-check'
                            name='groupTest'
                            id='skippedTest'
                            autocomplete='off'
                            category='skipped'
                        />
                        <label class='btn btn-outline-dark' for='skippedTest'>Skipped
                            <span class='numTest' name='numTest' lcategory='skipped'>0</span>
                        </label>

                    </div>
                </div>
            </div>

            <div class="row level_5">
                <div class="col-12">
                    {{#if tests.length}}
                    <!-- TOP pagination & select components -->
                    <div class="mt-5 mb-3 d-flex justify-content-between" style="height: 40px;">
                        <nav id="pagination">
                            <ul class="pagination">
                            </ul>
                        </nav>
                        {{ selectComponent }}
                    </div>
                        <!-- Test data section -->
                        <div class="testWrapp">
                            {{#each tests}}

                                <div class="testitem d-none" name="testitem" type="dummy" category="false">

                                    <div class="testitem__top">
                                        <div class="testitem__icon">
                                            <i class="fa-solid fa-chevron-right testitem__ico testitem__ico_right"></i>
                                            <i class="fa-solid fa-chevron-down d-none testitem__ico testitem__ico_down"></i>
                                        </div>
                                        <p class="testitem__name">Test</p>
                                    </div>

                                    <div class="testitem__body d-none">

                                        <div class='testitem__menu'>
                                            <span type='steps' class='testitem__mitem testitem__mitem_active'>Steps
                                            <i class='fa-solid fa-arrow-right'></i></span>
                                            <span type='status' class='testitem__mitem'>Status
                                            <i class='fa-solid fa-arrow-right'></i></span>
                                            <span type='message' class='testitem__mitem'>Message
                                            <i class='fa-solid fa-arrow-right'></i></span>
                                            <span type='files' class='testitem__mitem'>Files <i class='fa-solid fa-arrow-right'></i></span>
                                        </div>

                                        <div class="testitem__content">
                                            <!-- 1 -->
                                            <div class="testitem__case" type="steps">
                                                <p class="testitem__title">Steps</p>
                                                <div class="testitem__block">
                                                    <span>...</span>
                                                </div>
                                            </div>
                                            <!-- 1 -->

                                            <!-- 2 -->
                                            <div class='testitem__case d-none' type='status'>
                                                <p class='testitem__title'>Status</p>
                                                <div class='testitem__block'>
                                                    <span>...</span>
                                                </div>
                                            </div>
                                            <!-- 2 -->

                                            <!-- 3 -->
                                            <div class='testitem__case d-none' type='message'>
                                                <p class='testitem__title'>Message</p>
                                                <div class='testitem__block'>
                                                    <span>...</span>
                                                </div>
                                            </div>
                                            <!-- 3 -->

                                            <!-- 4 -->
                                            <div class='testitem__case d-none' type='files'>
                                                <p class='testitem__title'>Files</p>
                                                <div class='testitem__block'>
                                                    <span>...</span>
                                                </div>
                                            </div>
                                            <!-- 4 -->
                                        </div>
                                    </div>
                                </div>
                            {{/each}}
                        </div>
                        <!-- BOTTOM pagination & select components -->
                        <nav class="mt-2">
                            <ul class="pagination">
                            </ul>
                        </nav> 
                    {{else}}
                        <!-- No tests found section -->
                        {{ emptyDataComponent }}
                    {{/if}}
                </div>
            </div>

        </div>
    </section>

    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">
        // Load google charts
        google.charts.load('current', {'packages':['corechart']});
        google.charts.setOnLoadCallback(drawChart);
        
        // Draw the chart and set the chart values
        function drawChart() {
            let data = {};
            const passedTests = {{getTestsByStatus tests "PASSED"}};
            const failedTests = {{getTestsByStatus tests "FAILED"}};
            const skippedTests = {{getTestsByStatus tests "SKIPPED"}};

            if (passedTests === 0 && failedTests === 0 && skippedTests === 0) {
                data = google.visualization.arrayToDataTable([
                    ['Task', 'Tests'],
                    ['No Tests', 1]
                ])
            }
            else {
                data = google.visualization.arrayToDataTable([
                    ['Task', 'Tests'],
                    ['No Tests', 0],
                    ['Passed', passedTests],
                    ['Failed', failedTests],
                    ['Skipped', skippedTests], 
                ]);
            }        
            // Optional: add a title and set the width and height of the chart
            const options = {
                'title':'',
                'width':550,
                'height':300,
                'colors': ['#939992', '#39BD2F', '#F2230C', '#F2C00C']
            };        
            // Display the chart inside the <div> element with id="piechart"
            const chart = new google.visualization.PieChart(document.getElementById('graff'));
            chart.draw(data, options);
        }

        // processing and adding test data to the template
        function addOneTest(category,testData = {}){
            const { suite_title, title, steps, message, files } = testData;
            // collapse - expand block            
            const clone = createClone(category, suite_title, title);
            const testitem__top = clone.querySelector('.testitem__top');

            setTestItemContent(clone, steps, category, message, files);
            addCollapseExpandListener(testitem__top);
            initializeMenu(clone);
        }

        function createClone(category, suite_title, title) {
            const page = document.querySelector('.report');
            const wrapp = page.querySelector('.testWrapp');
            const dummy = wrapp.querySelector('div[name="testitem"][type="dummy"]');
            const clone = dummy.cloneNode(true);

            clone.setAttribute('type', 'clone');
            clone.setAttribute('category', category);
            clone.classList.remove('d-none');
            wrapp.append(clone);

            const testitem__name = clone.querySelector('.testitem__name');
            testitem__name.innerHTML = suite_title ? suite_title + " - " + title : title;

            return clone;
        }

        function setTestItemContent(clone, steps, category, message, files) {
            const body = clone.querySelector('.testitem__body');

            let content = body.querySelector('.testitem__content'),
                content_error = content.querySelector('div[type="steps"]').querySelector('span'),
                content_status = content.querySelector('div[type="status"]').querySelector('span'),
                content_message = content.querySelector('div[type="message"]').querySelector('span'),
                content_files = content.querySelector('div[type="files"]').querySelector('span');

            content_error.innerHTML = steps;
            content_status.innerHTML = category.toUpperCase();
            content_message.innerHTML = message;
            //if no file - empty message, else - files
            (files.includes("This test has no files"))
                ? content_files.innerHTML = files
                : addFilesToContent(content_files, files);
        }

        function addFilesToContent(content_files, files) {
            const filesList = document.createElement('div');

            filesList.classList.add('d-flex', 'flex-wrap', 'flex-column');
            content_files.innerHTML = "";

            if (Array.isArray(files) && files.length > 0) {
                for (let i = 0; i < files.length; i += 2) {
                    const filePairContainer = document.createElement('div');
                    filePairContainer.classList.add('d-flex', 'mb-3', 'justify-content-around');

                    for (let j = i; j < i + 2 && j < files.length; j++) {
                        const file = files[j];
                        const fileItemContainer = createFileItemContainer(file);
                        filePairContainer.appendChild(fileItemContainer);
                    }

                    filesList.appendChild(filePairContainer);
                }

                content_files.appendChild(filesList);
            }
        }

        function createFileItemContainer(file) {
            let fileIcon;

            const filepath = file?.path || file;
            const fileName = createFileName(file);
            const fileItemContainer = document.createElement('div');
            const fileExtension = filepath.split('.').pop().toLowerCase();

            fileItemContainer.classList.add('d-flex', 'flex-column', 'align-items-center', 'mr-3');

            switch (fileExtension) {
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'gif':
                    fileIcon = createImagePreview(file);
                    break;
                case 'zip':
                    const svgZipCode = 
                        `<?xml version="1.0" encoding="iso-8859-1"?>
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                            viewBox="0 0 512 512" xml:space="preserve">
                        <path style="fill:#FDCC77;" d="M511.344,274.266C511.77,268.231,512,262.143,512,256C512,114.615,397.385,0,256,0S0,114.615,0,256
                        c0,117.769,79.53,216.949,187.809,246.801L511.344,274.266z"/>
                        <path style="fill:#FCB433;" d="M511.344,274.266L314.991,77.913L119.096,434.087l68.714,68.714C209.522,508.787,232.385,512,256,512
                        C391.243,512,501.976,407.125,511.344,274.266z"/>
                        <polygon style="fill:#FFFFFF;" points="278.328,333.913 255.711,77.913 119.096,77.913 119.096,311.652 "/>
                        <polygon style="fill:#E8E6E6;" points="392.904,311.652 392.904,155.826 337.252,133.565 314.991,77.913 255.711,77.913
                        256.067,333.913 "/>
                        <polygon style="fill:#FFFFFF;" points="314.991,155.826 314.991,77.913 392.904,155.826 "/>
                        <rect x="119.096" y="311.652" style="fill:#9E7120;" width="273.809" height="122.435"/>
                        <g>
                        <path style="fill:#FFFFFF;" d="M210.927,388.691h28.759v10.671h-46.771v-8.627l28.38-33.677H193.9v-10.671h45.332v8.627
                            L210.927,388.691z"/>
                        <path style="fill:#FFFFFF;" d="M249.075,399.362v-52.975h13.471v52.975H249.075z"/>
                        <path style="fill:#FFFFFF;" d="M298.118,346.387c13.546,0,21.341,6.659,21.341,18.465c0,12.412-7.796,19.601-21.341,19.601h-9.612
                            v14.909h-13.471v-52.975L298.118,346.387L298.118,346.387z M288.505,373.858h8.93c5.904,0,9.307-2.952,9.307-8.552
                            c0-5.525-3.405-8.324-9.307-8.324h-8.93V373.858z"/>
                        </g>
                        </svg>`;
                    fileIcon = createFileIcon(file,svgZipCode);
                    break;
                case 'mp4':
                case 'avi':
                case 'mov':
                case 'webm':
                    const svgVideoCode = 
                        `<?xml version="1.0" encoding="iso-8859-1"?>
                        <svg height="150px" width="150px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                viewBox="0 0 503.467 503.467" xml:space="preserve">
                            <g transform="translate(5 1)">
                            <path style="fill:#F2EDDA;" d="M460.067,122.733v341.333c0,18.773-15.36,34.133-34.133,34.133h-358.4
                                c-18.773,0-34.133-15.36-34.133-34.133V37.4c0-18.773,15.36-34.133,34.133-34.133H340.6V88.6c0,18.773,15.36,34.133,34.133,34.133
                                H460.067z"/>
                            <path style="fill:#FFD0A1;" d="M460.067,122.733h-85.333c-18.773,0-34.133-15.36-34.133-34.133V3.267L460.067,122.733z"/>
                            <path style="fill:#80D6FA;" d="M246.733,191c61.44,0,110.933,49.493,110.933,110.933s-49.493,110.933-110.933,110.933
                                c-61.44,0-110.933-49.493-110.933-110.933S185.293,191,246.733,191L246.733,191z"/>
                            <polygon style="fill:#ECF4F7;" points="280.867,301.933 221.133,336.067 221.133,267.8 	"/>
                            </g>
                            <path style="fill:#51565F;" d="M430.933,503.467h-358.4c-21.333,0-38.4-17.067-38.4-38.4V38.4C34.133,17.067,51.2,0,72.533,0H345.6
                            c0.853,0,2.56,0.853,3.413,0.853l85.333,85.333c1.707,1.707,1.707,4.267,0,5.973c-1.707,1.707-4.267,1.707-5.973,0l-84.48-84.48
                            H72.533c-16.213,0-29.867,13.653-29.867,29.867v426.667c0,16.213,13.653,29.867,29.867,29.867h358.4
                            c16.213,0,29.867-13.653,29.867-29.867V127.147h-81.067c-21.333,0-38.4-17.067-38.4-38.4V46.08c0-2.56,1.707-4.267,4.267-4.267
                            s4.267,1.707,4.267,4.267v42.667c0,16.213,13.653,29.867,29.867,29.867h85.333c2.56,0,4.267,1.707,4.267,4.267v341.333
                            C469.333,486.4,452.267,503.467,430.933,503.467z M251.733,418.133c-63.147,0-115.2-52.053-115.2-115.2s52.053-115.2,115.2-115.2
                            s115.2,52.053,115.2,115.2S314.88,418.133,251.733,418.133z M251.733,196.267c-58.88,0-106.667,47.787-106.667,106.667
                            S192.853,409.6,251.733,409.6S358.4,361.813,358.4,302.933S310.613,196.267,251.733,196.267z M226.133,341.333
                            c-0.853,0-1.707,0-2.56-0.853c-1.707-0.853-1.707-2.56-1.707-3.413V268.8c0-1.707,0.853-2.56,1.707-3.413
                            c1.707-0.853,2.56-0.853,4.267,0l59.733,34.133c1.707,0.853,2.56,2.56,2.56,3.413s-0.853,2.56-2.56,3.413L227.84,340.48
                            C227.84,341.333,226.987,341.333,226.133,341.333z M230.4,276.48v53.76l46.933-26.453L230.4,276.48z"/>
                        </svg>`;
                    fileIcon = createFileIcon(file, svgVideoCode);
                    break;
                default:
                    const svgFileCode = 
                        `<?xml version="1.0" encoding="iso-8859-1"?>
                        <svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                viewBox="0 0 512 512" xml:space="preserve">
                            <polygon style="fill:#72C6EF;" points="384,448 128,448 128,64 288,64 288,160 384,160 "/>
                            <path style="fill:#00384E;" d="M310.624,0H64v512h384V137.376L310.624,0z M320,54.624L393.376,128H320V54.624z M96,480V32h192v128
                            h128v320H96z"/>
                            <g>
                            <rect x="176" y="368" style="fill:#00384D;" width="160" height="32"/>
                            <rect x="176" y="304" style="fill:#00384D;" width="160" height="32"/>
                            <rect x="176" y="240" style="fill:#00384D;" width="160" height="32"/>
                            </g>
                        </svg>`;
                    fileIcon = createFileIcon(file, svgFileCode);
            }
            
            fileItemContainer.appendChild(fileIcon);
            fileItemContainer.appendChild(fileName);

            return fileItemContainer;
        }

        function createImagePreview(file) {
            //TODO: consider using "../${file}", maybe we should get full paths when generating artifacts in Mocha!
            const filepath = file?.path || `../${file}`;
            const imagePreview = document.createElement('img');
            // component styles
            imagePreview.src = filepath;
            imagePreview.alt = 'Image Preview';
            imagePreview.style.maxWidth = '200px';
            imagePreview.style.height = '150px';
            imagePreview.style.cursor = 'pointer';

            imagePreview.addEventListener('click', () => {
                window.open(filepath, '_blank');
            });

            return imagePreview;
        }

        function createFileIcon(file, svg) {
            //TODO: consider using "../${file}", maybe we should get full paths when generating artifacts in Mocha!
            const filepath = file?.path || `../${file}`;
            const fileIcon = document.createElement('div');
            // component styles
            fileIcon.innerHTML = svg;
            fileIcon.style.width = '150px';
            fileIcon.style.height = '150px';
            fileIcon.style.cursor = 'pointer';

            fileIcon.addEventListener('click', () => {
                window.open(filepath, '_blank');
            });

            return fileIcon;
        }

        function createFileName(file) {
            //TODO: consider using "../${file}", maybe we should get full paths when generating artifacts in Mocha!
            const filepath = file?.path || `../${file}`;
            const fileName = document.createElement('div');
            // component styles
            fileName.style.fontSize = '14px';
            fileName.style.marginTop = '10px';
            fileName.style.cursor = 'pointer';

            fileName.textContent = filepath.split('/').pop();

            fileName.addEventListener('click', () => {
                window.open(filepath, '_blank');
            });

            return fileName;
        }

        function addCollapseExpandListener(testitem__top) {
            testitem__top.addEventListener("click", function () {
                collapse_expand(testitem__top);
            });
        }

        function collapse_expand(top) {
            const block = top.closest('.testitem');
            const icon = top.querySelector('.testitem__icon');
            const testitem__ico_right = icon.querySelector('.testitem__ico_right');
            const testitem__ico_down = icon.querySelector('.testitem__ico_down');
            const body = block.querySelector('.testitem__body');

            if (body.classList.contains('d-none')) {
                body.classList.remove('d-none');
                testitem__ico_right.classList.add('d-none');
                testitem__ico_down.classList.remove('d-none');
            } 
            else {
                body.classList.add('d-none');
                testitem__ico_down.classList.add('d-none');
                testitem__ico_right.classList.remove('d-none');
            }
        }

        function initializeMenu(clone) {
            const menu = clone.querySelector('.testitem__menu');
            const item = menu.querySelectorAll('.testitem__mitem');

            for (let i = 0; i < item.length; i++) {
                item[i].addEventListener('click', function () {
                    show_content(item[i])
                })
            }
        }

        function show_content(elem) {
            removeAddActive(elem);

            const body = elem.closest('.testitem__body');
            const content = body.querySelector('.testitem__content');
            const blocks = content.querySelectorAll('.testitem__case');

            for (let i = 0; i < blocks.length; i++) {
                blocks[i].classList.add('d-none');
            }

            const type = elem.getAttribute('type');
            const show_elem = content.querySelector('div[type="' + type + '"]');

            show_elem.classList.remove('d-none');
        }

        function removeAddActive(elem) {
            const menu = elem.closest('.testitem__menu');
            const item = menu.querySelectorAll('.testitem__mitem');

            for (let i = 0; i < item.length; i++) {
                item[i].classList.remove('testitem__mitem_active');
            }
            elem.classList.add('testitem__mitem_active');
        }

        // GET test data
        const testEntries = {{{ pageDispleyElements tests }}};
        const allEntries = testEntries['totalTests'];

        if (allEntries.length === 0) {
            const searchEl = document.querySelector('.input-group');
            const radioEl = document.querySelector('.menuTests');

            searchEl.classList.add('d-none')
            radioEl.classList.add('d-none')
        } 
        else {
            function search(array, testEntries) {
                const handleSearch = (input) => {
                    const value = input.value.trim().toLowerCase();
                    const select = document.querySelector('.form-select');
                    const pagination = document.querySelectorAll('nav');

                    if (value) {
                        select.classList.add('d-none');
                        pagination.forEach(item => item.classList.add('d-none'));
                    } 
                    else {
                        select.classList.remove('d-none');
                        pagination.forEach(item => item.classList.remove('d-none'));

                        remove(array);

                        const paginationCount = select.value;
                        const category = select.getAttribute('status');
                        
                        if (testEntries[category][paginationCount][0]) {
                            add(testEntries[category][paginationCount][0]);
                        }
                    }

                    remove(array);

                    const filteredTests = array.filter(test => test.title.toLowerCase().includes(value) || test.suite_title.toLowerCase().includes(value));

                    const existingNoDataElement = document.querySelector('.noResults');

                    if (filteredTests.length === 0) {
                        if (!existingNoDataElement) {
                            const testElement = document.createElement('div');
                            testElement.classList.add('noData', 'noResults');
                            testElement.innerHTML = 'NO SEARCH RESULTS';
                            document.querySelector('.testWrapp').appendChild(testElement);
                        }
                    } 
                    else {
                        const paginationCount = select.value;
                        const category = select.getAttribute('status');

                        if (existingNoDataElement) {
                            existingNoDataElement.remove();
                        }

                        if (testEntries[category][paginationCount][0]) {
                            add(filteredTests);
                            if (!value) {
                                remove(filteredTests);
                                add(testEntries[category][paginationCount][0]);
                            }
                        } 
                        else {
                            if (value) {
                                add(filteredTests);
                            }
                            else {
                                if (!existingNoDataElement) {
                                    const testElement = document.createElement('div');

                                    select.classList.add('d-none');                                    
                                    testElement.classList.add('noData', 'noResults');
                                    testElement.innerHTML = 'NO RESULTS';
                                    document.querySelector('.testWrapp').appendChild(testElement);
                                }
                            }
                        }
                    }
                };

                const inputSearch = document.querySelector('.report .inputSearch');
                inputSearch.addEventListener('input', () => handleSearch(inputSearch));
            }

            function radioMenuStart(){
                function showBlockForCat(input){
                    const searchEl = document.querySelector('.input-group'),
                        element = document.querySelector('.form-select')
                    let category = 'all';

                    remove(testEntries[category][0][0]);

                    category = input.getAttribute('category');
                    element.setAttribute('status', category);

                    const pagination = document.querySelectorAll('nav');
                    pagination.forEach(item => item.classList.add('d-none'));

                    let inputEl = document.querySelector('.inputSearch');
                    inputEl.value = '';
                    
                    pagination.forEach(item => item.classList.remove('d-none'));

                    displayPagination(testEntries,element.value,category);

                    if(testEntries[category][0][0]){
                        element.classList.remove('d-none');
                        const existingNoDataElement = document.querySelector('.noResults');

                        if (existingNoDataElement) {
                            existingNoDataElement.remove();
                        }

                        searchEl.classList.remove('d-none');
                        add(testEntries[category][element.value][0]);
                    }
                    else {
                        element.classList.add('d-none');
                        const existingNoDataElement = document.querySelector('.noResults');

                        if (existingNoDataElement) {
                            existingNoDataElement.remove();
                        }

                        const testElement = document.createElement('div');
                        testElement.classList.add('noData');
                        testElement.classList.add('noResults');
                        testElement.innerHTML = 'NO RESULTS';
                        searchEl.classList.add('d-none');

                        const testWrapp = document.querySelector('.testWrapp');
                        testWrapp.appendChild(testElement);
                    }
                }

                const page = document.querySelector('.report');
                const menuTests = page.querySelector('.menuTests');
                const items = menuTests.querySelectorAll('input[name="groupTest"]');

                for(let i=0; i<items.length; i++){
                    items[i].addEventListener('change',function(){
                        showBlockForCat(items[i])
                    })
                }
            }

            radioMenuStart();

            search(allEntries, testEntries);

            const radioCount = (allEntries) => {
                const allRadio = document.querySelectorAll('.numTest');

                allRadio.forEach((radio) => {
                    const attribute = radio.getAttribute('lcategory');

                    switch (attribute) {
                        case 'all':
                            radio.innerHTML = allEntries.length;
                            break;
                        case 'passed':
                            const passedCount = allEntries.filter(test => test.status === 'passed').length;
                            radio.innerHTML = passedCount;
                            break;
                        case 'failed':
                            const failedCount = allEntries.filter(test => test.status === 'failed').length;
                            radio.innerHTML = failedCount;
                            break;
                        case 'skipped':
                            const skippedCount = allEntries.filter(test => test.status === 'skipped').length;
                            radio.innerHTML = skippedCount;
                            break;
                        default: // no default action for now
                    }
                });
            }

            radioCount(allEntries);

            function removeTest(category) {
                const page = document.querySelector('.report');
                const wrapp = page.querySelector('.testWrapp');
                const clones = wrapp.querySelectorAll('div[name="testitem"][type="clone"]');

                clones.forEach((clone) => {
                    if (clone.getAttribute('category') === category) clone.remove();
                });
            }

            const add = (array) => {
                for (let i = 0; i < array.length; i++) {
                    const status = array[i].status;
                    addOneTest(status, array[i]);
                }
            }

            const remove = (array) => {
                for (let i = 0; i < array.length; i++) {
                    const status = array[i].status;
                    removeTest(status, array[i]);
                }
            }

            add(testEntries['all'][0][0]);

            const selectElement = document.querySelector('.form-select');

            selectElement.setAttribute('status', 'all');

            selectElement.addEventListener('change', function() {
                let value = 0;
                const category = selectElement.getAttribute('status');

                remove(testEntries[category][value][0]);
                value = parseInt(this.value);
                add(testEntries[category][value][0]);

                displayPagination(testEntries, value, category);
            });

            const displayPagination = (testEntries, index, category) => {
                let totalPages = testEntries[category][index].length;
                let currentPage = 1;

                function createPagination() {
                    const paginationContainers = document.querySelectorAll('.pagination');
                    paginationContainers.forEach((paginationContainer) => {
                        paginationContainer.innerHTML = '';

                        let startPage = 1;
                        let endPage = totalPages;
                        if (totalPages > 10) {
                            if (currentPage > 5) {
                                startPage = currentPage - 1;
                                endPage = currentPage + 1;
                            } 
                            else {
                                endPage = 5;
                            }
                        }

                        if (startPage > 1) {
                            const startEllipsis = document.createElement('li');

                            startEllipsis.classList.add('page-item');
                            startEllipsis.innerHTML = '<a class="page-link" href="#pagination">...</a>';
                            startEllipsis.addEventListener('click', () => {
                                remove(testEntries[category][index][currentPage - 1]);
                                currentPage = 1;
                                add(testEntries[category][index][currentPage - 1]);
                                createPagination();
                            });

                            paginationContainer.appendChild(startEllipsis);
                        }

                        for (let i = startPage; i <= endPage; i++) {
                            if (i <= totalPages) {
                                const pageButton = document.createElement('li');
                                pageButton.classList.add('page-item');

                                if (i === currentPage) {
                                    pageButton.classList.add('active');
                                }

                                pageButton.innerHTML = `<a class="page-link" href="#pagination">${i}</a>`;
                                pageButton.addEventListener('click', () => {
                                    remove(testEntries[category][index][currentPage - 1]);
                                    currentPage = i;
                                    add(testEntries[category][index][currentPage - 1]);
                                    createPagination();
                                });

                                paginationContainer.appendChild(pageButton);
                            }
                        }

                        if (endPage < totalPages) {
                            const endEllipsis = document.createElement('li');
                            
                            endEllipsis.classList.add('page-item');
                            endEllipsis.innerHTML = '<a class="page-link" href="#pagination">...</a>';
                            endEllipsis.addEventListener('click', () => {
                                remove(testEntries[category][index][currentPage - 1]);
                                currentPage = totalPages;
                                add(testEntries[category][index][currentPage - 1]);
                                createPagination();
                            });

                            paginationContainer.appendChild(endEllipsis);
                        }

                        if (currentPage > 1) {
                            const prevButton = document.createElement('li');

                            prevButton.classList.add('page-item');
                            prevButton.innerHTML = '<a class="page-link" href="#pagination">Previous</a>';
                            prevButton.addEventListener('click', () => {
                                remove(testEntries[category][index][currentPage - 1]);
                                currentPage--;
                                add(testEntries[category][index][currentPage - 1]);
                                createPagination();
                            });

                            paginationContainer.insertBefore(prevButton, paginationContainer.firstChild);
                        }
                        if (currentPage < totalPages) {
                            const nextButton = document.createElement('li');

                            nextButton.classList.add('page-item');
                            nextButton.innerHTML = '<a class="page-link" href="#pagination">Next</a>';
                            nextButton.addEventListener('click', () => {
                                remove(testEntries[category][index][currentPage - 1]);
                                currentPage++;
                                add(testEntries[category][index][currentPage - 1]);
                                createPagination();
                            });

                            paginationContainer.appendChild(nextButton);
                        }
                    });
                }
                createPagination();
            }
            displayPagination(testEntries, 0, 'all');
        }

    </script>
</body>
</html>